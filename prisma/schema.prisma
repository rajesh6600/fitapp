// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Main application models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts       Account[]
  sessions       Session[]
  goals          Goal[]
  todos          Todo[]



  @@map("users")
}

model Goal {
  id          String   @id @default(cuid())
  type        GoalType
  title       String
  description String?
  targetValue Float? // e.g., target weight, days streak
  currentValue Float? @default(0)
  specificArea String? // For muscle building
  skinConcern  String? // For skin issues
  hairConcern  String? // For hair issues
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model MealSuggestion {
  id              String   @id @default(cuid())
  spoonacularId   Int      @unique
  title           String
  image           String?
  summary         String?  @db.Text
  readyInMinutes  Int?
  servings        Int?
  pricePerServing Float?
  healthScore     Int?
  cuisines        String[] 
  diets           String[] 
  goalTypes       GoalType[] 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt



  @@map("meal_suggestions")
}

// To-Do items per user
model Todo {
  id          String    @id @default(cuid())
  title       String
  notes       String?   @db.Text
  // For one-off items, combined due datetime
  dueAt       DateTime?
  // For templates (recurring), time of day in HH:mm (24h)
  timeOfDay   String?
  // Recurrence
  recurrence  TodoRecurrence @default(NONE)
  isTemplate  Boolean   @default(false)
  // Link instances back to their template when applicable
  templateId  String?
  template    Todo?     @relation("Template", fields: [templateId], references: [id], onDelete: Cascade)
  children    Todo[]    @relation("Template")
  tags        String[]
  completed   Boolean   @default(false)
  position    Int       @default(0) // for manual ordering via drag-and-drop
  updatedAt   DateTime  @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, completed])
  @@index([templateId])
  @@map("todos")
}

// Enums
enum GoalType {
  BUILD_MUSCLE
  GLOWING_SKIN
  HAIR_GROWTH

  HEALTHY_AGING
  MANAGE_CONDITION
  WEIGHT_LOSS
  WEIGHT_GAIN
  GENERAL_WELLNESS

  HAIR_PROBLEM_SOLVER
}


enum TodoRecurrence {
  NONE
  DAILY
}